<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/dndmanagerslim/data/CharacterData.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/dndmanagerslim/data/CharacterData.kt" />
              <option name="originalContent" value="package com.example.dndmanagerslim.data&#10;&#10;import com.google.gson.annotations.SerializedName&#10;&#10;data class CharacterListResponse(&#10;    @SerializedName(&quot;characters&quot;) val characters: List&lt;Character&gt;&#10;)&#10;&#10;data class Character(&#10;    @SerializedName(&quot;_id&quot;) val id: String,&#10;    val name: String,&#10;    val `class`: String,&#10;    val level: Int,&#10;    val stats: Stats,&#10;    @SerializedName(&quot;hit_points&quot;) val hitPoints: Int,&#10;    val inventory: List&lt;String&gt; = emptyList(),&#10;    val equipment: List&lt;String&gt; = emptyList(),&#10;    val skills: Skills,&#10;    val spells: List&lt;Spell&gt;&#10;)&#10;&#10;data class Stats(&#10;    val strength: Int,&#10;    val dexterity: Int,&#10;    val constitution: Int,&#10;    val intelligence: Int,&#10;    val wisdom: Int,&#10;    val charisma: Int&#10;)&#10;&#10;data class Skills(&#10;    val athletics: Int,&#10;    val acrobatics: Int,&#10;    val stealth: Int,&#10;    val perception: Int,&#10;    val insight: Int,&#10;    val persuasion: Int,&#10;    val performance: Int,&#10;    val intimidation: Int,&#10;    val arcana: Int,&#10;    val history: Int,&#10;    val nature: Int,&#10;    val religion: Int,&#10;    val medicine: Int,&#10;    val survival: Int,&#10;    val deception: Int,&#10;    @SerializedName(&quot;sleight_of_hand&quot;) val sleightOfHand: Int,&#10;    @SerializedName(&quot;investigation&quot;) val investigation: Int,&#10;    @SerializedName(&quot;animal_handling&quot;) val animalHandling: Int&#10;)&#10;&#10;data class Spell(&#10;    val name: String,&#10;    val level: Int,&#10;    val school: String&#10;)&#10;&#10;&#10;fun calculateModifier(score: Int): Int {&#10;    return ((score - 10) / 2)&#10;}" />
              <option name="updatedContent" value="package com.example.dndmanagerslim.data&#10;&#10;import com.google.gson.annotations.SerializedName&#10;&#10;data class CharacterListResponse(&#10;    @SerializedName(&quot;characters&quot;) val characters: List&lt;Character&gt; = emptyList()&#10;)&#10;&#10;data class Character(&#10;    @SerializedName(&quot;_id&quot;) val id: String = &quot;&quot;,&#10;    val name: String = &quot;&quot;,&#10;    val `class`: String = &quot;&quot;,&#10;    val level: Int = 1,&#10;    val stats: Stats = Stats(),&#10;    @SerializedName(&quot;hit_points&quot;) val hitPoints: Int = 0,&#10;    val inventory: List&lt;String&gt; = emptyList(),&#10;    val equipment: List&lt;String&gt; = emptyList(),&#10;    val skills: Skills = Skills(),&#10;    val spells: List&lt;Spell&gt; = emptyList()&#10;)&#10;&#10;data class Stats(&#10;    val strength: Int = 10,&#10;    val dexterity: Int = 10,&#10;    val constitution: Int = 10,&#10;    val intelligence: Int = 10,&#10;    val wisdom: Int = 10,&#10;    val charisma: Int = 10&#10;)&#10;&#10;data class Skills(&#10;    val athletics: Int = 0,&#10;    val acrobatics: Int = 0,&#10;    val stealth: Int = 0,&#10;    val perception: Int = 0,&#10;    val insight: Int = 0,&#10;    val persuasion: Int = 0,&#10;    val performance: Int = 0,&#10;    val intimidation: Int = 0,&#10;    val arcana: Int = 0,&#10;    val history: Int = 0,&#10;    val nature: Int = 0,&#10;    val religion: Int = 0,&#10;    val medicine: Int = 0,&#10;    val survival: Int = 0,&#10;    val deception: Int = 0,&#10;    @SerializedName(&quot;sleight_of_hand&quot;) val sleightOfHand: Int = 0,&#10;    @SerializedName(&quot;investigation&quot;) val investigation: Int = 0,&#10;    @SerializedName(&quot;animal_handling&quot;) val animalHandling: Int = 0&#10;)&#10;&#10;data class Spell(&#10;    val name: String = &quot;&quot;,&#10;    val level: Int = 0,&#10;    val school: String = &quot;&quot;&#10;)&#10;&#10;&#10;fun calculateModifier(score: Int): Int {&#10;    return ((score - 10) / 2)&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/dndmanagerslim/data/NpcData.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/dndmanagerslim/data/NpcData.kt" />
              <option name="originalContent" value="package com.example.dndmanagerslim.data&#10;import com.google.gson.annotations.SerializedName&#10;import java.util.Date&#10;&#10;data class NpcData(&#10;    val npc_id: String = &quot;&quot;,&#10;    val name: String = &quot;&quot;,&#10;    val description: String = &quot;&quot;,&#10;    val appearance: String = &quot;&quot;,&#10;    val personality_Traits: String = &quot;&quot;,&#10;    val backstory: String = &quot;&quot;,&#10;    val status: Stats = Stats(&#10;        strength = 10,&#10;        dexterity = 10,&#10;        constitution = 10,&#10;        intelligence = 10,&#10;        wisdom = 10,&#10;        charisma = 10&#10;    ),&#10;    val role: String = &quot;&quot;,&#10;    val current_quests: List&lt;String&gt; = emptyList(),&#10;    val relationships: List&lt;Relationship&gt; = emptyList(),&#10;    val current_location: String = &quot;&quot;,&#10;    val lastSeen: Date = Date(),&#10;    @SerializedName(&quot;AdditionalInfo&quot;) val additionalInfo: String = &quot;&quot;&#10;)&#10;&#10;data class Relationship (&#10;    @SerializedName(&quot;character_id&quot;) val npcId: String = &quot;&quot;,&#10;    @SerializedName(&quot;relationship_type&quot;) val relationshipType: String = &quot;&quot;,&#10;    val notes: String = &quot;&quot;&#10;)&#10;&#10;&#10;" />
              <option name="updatedContent" value="package com.example.dndmanagerslim.data&#10;import com.google.gson.annotations.SerializedName&#10;import java.util.Date&#10;&#10;data class NpcData(&#10;    val npc_id: String = &quot;&quot;,&#10;    val name: String = &quot;&quot;,&#10;    val description: String = &quot;&quot;,&#10;    val appearance: String = &quot;&quot;,&#10;    val personality_Traits: String = &quot;&quot;,&#10;    val backstory: String = &quot;&quot;,&#10;    val status: Stats = Stats(&#10;        strength = 10,&#10;        dexterity = 10,&#10;        constitution = 10,&#10;        intelligence = 10,&#10;        wisdom = 10,&#10;        charisma = 10&#10;    ),&#10;    val role: String = &quot;&quot;,&#10;    val current_quests: List&lt;String&gt; = emptyList(),&#10;    val relationships: List&lt;Relationship&gt; = emptyList(),&#10;    val current_location: String = &quot;&quot;,&#10;    val lastSeen: Date = Date(),&#10;    @SerializedName(&quot;AdditionalInfo&quot;) val additionalInfo: String = &quot;&quot;&#10;)&#10;&#10;data class Relationship (&#10;    @SerializedName(&quot;character_id&quot;) val npcId: String = &quot;&quot;,&#10;    @SerializedName(&quot;relationship_type&quot;) val relationshipType: String = &quot;&quot;,&#10;    val notes: String = &quot;&quot;&#10;)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/dndmanagerslim/ui/CharacterUiState.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/dndmanagerslim/ui/CharacterUiState.kt" />
              <option name="originalContent" value="package com.example.dndmanagerslim.ui&#10;&#10;import com.example.dndmanagerslim.components.character.CharacterTabs&#10;import com.example.dndmanagerslim.data.Character&#10;import com.example.dndmanagerslim.data.NpcData&#10;&#10;&#10;data class CharacterUiState (&#10;    val isLoading: Boolean = false,&#10;    val searchQuery: String = &quot;&quot;,&#10;    val errorMessage: String = &quot;&quot;,&#10;    val selectedCharacterTab: Int = 0,&#10;    val selectedPlayerCharacterTab: Int = 0,&#10;    val selectedNonPlayerCharacterTab: Int = 0,&#10;    val selectedCharacter: Character = Character(),&#10;    val selectedNpcCharacter: NpcData = NpcData(),&#10;    val characters: List&lt;Character&gt; = emptyList(),&#10;    val npcCharacters: List&lt;NpcData&gt; = emptyList(),&#10;    val filteredCharacters: List&lt;Character&gt; = emptyList(),&#10;    val filteredNpcCharacters: List&lt;NpcData&gt; = emptyList(),&#10;    )&#10;" />
              <option name="updatedContent" value="package com.example.dndmanagerslim.ui&#10;&#10;import com.example.dndmanagerslim.components.character.CharacterTabs&#10;import com.example.dndmanagerslim.data.Character&#10;import com.example.dndmanagerslim.data.NpcData&#10;&#10;&#10;data class CharacterUiState (&#10;    val isLoading: Boolean = false,&#10;    val searchQuery: String = &quot;&quot;,&#10;    val errorMessage: String = &quot;&quot;,&#10;    val selectedCharacterTab: Int = 0,&#10;    val selectedPlayerCharacterTab: Int = 0,&#10;    val selectedNonPlayerCharacterTab: Int = 0,&#10;    val selectedCharacter: Character = Character(),&#10;    val selectedNpcCharacter: NpcData = NpcData(),&#10;    val characters: List&lt;Character&gt; = emptyList(),&#10;    val npcCharacters: List&lt;NpcData&gt; = emptyList(),&#10;    val filteredCharacters: List&lt;Character&gt; = emptyList(),&#10;    val filteredNpcCharacters: List&lt;NpcData&gt; = emptyList(),&#10;    )" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/dndmanagerslim/viewmodel/CharacterViewModel.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/dndmanagerslim/viewmodel/CharacterViewModel.kt" />
              <option name="originalContent" value="package com.example.dndmanagerslim.viewmodel&#10;&#10;import android.util.Log&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import com.example.dndmanagerslim.components.character.CharacterTabs&#10;import com.example.dndmanagerslim.components.character.NonPlayerCharacterTabs&#10;import com.example.dndmanagerslim.data.Character&#10;import com.example.dndmanagerslim.data.NpcData&#10;import com.example.dndmanagerslim.repository.DndRepository&#10;import com.example.dndmanagerslim.ui.CharacterUiState&#10;import kotlinx.coroutines.flow.MutableStateFlow&#10;import kotlinx.coroutines.flow.StateFlow&#10;import kotlinx.coroutines.flow.asStateFlow&#10;import kotlinx.coroutines.launch&#10;&#10;&#10;class CharacterViewModel(private val repository: DndRepository) : ViewModel() {&#10;&#10;    private val _uiState = MutableStateFlow(CharacterUiState())&#10;    val uiState: StateFlow&lt;CharacterUiState&gt; = _uiState.asStateFlow()&#10;    // Tab states for characters&#10;    // This is used to manage which tab is currently selected in the UI&#10;    // It allows the UI to react to changes in the selected tab and update accordingly&#10;    // The tabs are defined in the CharacterTabs enum, which includes PlayerCharacters and NonPlayer&#10;    private val _selectedCharacterTab = MutableStateFlow(0)&#10;    val selectedCharacterTab: StateFlow&lt;Int&gt; = _selectedCharacterTab.asStateFlow()&#10;    private val _selectedPlayerCharacterTab = MutableStateFlow(0)&#10;    val selectedPlayerCharacterTab: StateFlow&lt;Int&gt; = _selectedPlayerCharacterTab.asStateFlow()&#10;    private val _selectedNonPlayerCharacterTab = MutableStateFlow(0)&#10;    val selectedNonPlayerCharacterTab: StateFlow&lt;Int&gt; = _selectedNonPlayerCharacterTab.asStateFlow()&#10;&#10;&#10;    // Player Character related states&#10;    private val _characters = MutableStateFlow&lt;List&lt;Character&gt;&gt;(emptyList())&#10;    val characters: StateFlow&lt;List&lt;Character&gt;&gt; = _characters.asStateFlow()&#10;    private val _character = MutableStateFlow(Character())&#10;    val character: StateFlow&lt;Character?&gt; = _character.asStateFlow()&#10;&#10;    // Non-Player Character related states&#10;    private val _npcCharacters = MutableStateFlow&lt;List&lt;NpcData&gt;&gt;(emptyList())&#10;    val npcCharacters: StateFlow&lt;List&lt;NpcData&gt;&gt; = _npcCharacters.asStateFlow()&#10;    private val _npcCharacter = MutableStateFlow(NpcData())&#10;    val npcCharacter: StateFlow&lt;Character?&gt; = _character.asStateFlow()&#10;&#10;    // Filtered characters state&#10;    private val _filteredCharacters = MutableStateFlow&lt;List&lt;Character&gt;&gt;(emptyList())&#10;    val filteredCharacters: StateFlow&lt;List&lt;Character&gt;&gt; = _filteredCharacters.asStateFlow()&#10;&#10;    // filtered NPCs state&#10;    private val _filteredNpcCharacters = MutableStateFlow&lt;List&lt;NpcData&gt;&gt;(emptyList())&#10;    val filteredNpcCharacters: StateFlow&lt;List&lt;NpcData&gt;&gt; = _filteredNpcCharacters.asStateFlow()&#10;&#10;    init {&#10;        fetchCharacters()&#10;    }&#10;    fun fetchCharacters() {&#10;        viewModelScope.launch {&#10;            try {&#10;                val result = repository.getCharacters().characters&#10;                _characters.value = result&#10;&#10;            } catch (e: Exception) {&#10;                // Fehlerbehandlung&#10;&#10;                e.printStackTrace()&#10;                Log.e(&quot;CharacterViewModel&quot;, &quot;Error fetching characters: ${e.message}&quot;)&#10;            }&#10;        }&#10;    }&#10;&#10;    fun handleCharacterTabClick(tabIndex: Int) {&#10;        _selectedCharacterTab.value = tabIndex&#10;        &#10;        Log.d(&quot;CharacterViewModel&quot;, &quot;Selected character tab: $tabIndex&quot;)&#10;    }&#10;    fun handlePlayerCharacterTabs(tabIndex: Int) {&#10;        _selectedPlayerCharacterTab.value = tabIndex&#10;        Log.d(&quot;CharacterViewModel&quot;, &quot;Selected player character tab: $tabIndex&quot;)&#10;    }&#10;    fun handleNonPlayerCharacterTabs(tabIndex: Int) {&#10;        _selectedNonPlayerCharacterTab.value = tabIndex&#10;        Log.d(&quot;CharacterViewModel&quot;, &quot;Selected non-player character tab: $tabIndex&quot;)&#10;    }&#10;    // Search-Functions&#10;    fun onSearch(query: String) {&#10;        Log.d(&quot;CharacterViewModel&quot;, &quot;Searching in Player Characters Tab ${_selectedCharacterTab.value}: $query&quot;)&#10;        _filteredCharacters.value = _characters.value.filter { it.name.contains(query, ignoreCase = true) }&#10;&#10;        Log.d(&quot;CharacterViewModel&quot;, &quot;Searching in NPC Tab ${_selectedNonPlayerCharacterTab.value}: $query&quot;)&#10;        _filteredNpcCharacters.value = _npcCharacters.value.filter { it.name.contains(query, ignoreCase = true) }&#10;    }&#10;    fun handleQueryChange(query: String) {&#10;        Log.d(&quot;CharacterViewModel&quot;, &quot;Query changed: $query&quot;)&#10;        // handle the query change logic here&#10;    }&#10;    fun setCharacter(character: Character) {&#10;        _character.value = character&#10;        Log.d(&quot;CharacterViewModel&quot;, &quot;Selected character: ${character.name}&quot;)&#10;    }&#10;&#10;&#10;    // utility functions&#10;    fun getModifier(stat: Int): String {&#10;        return when {&#10;            stat &gt;= 20 -&gt; &quot;+5&quot;&#10;            stat &gt;= 18 -&gt; &quot;+4&quot;&#10;            stat &gt;= 16 -&gt; &quot;+3&quot;&#10;            stat &gt;= 14 -&gt; &quot;+2&quot;&#10;            stat &gt;= 12 -&gt; &quot;+1&quot;&#10;            stat &gt;= 10 -&gt; &quot;0&quot;&#10;            stat &gt;= 8 -&gt; &quot;-1&quot;&#10;            stat &gt;= 6 -&gt; &quot;-2&quot;&#10;            stat &gt;= 4 -&gt; &quot;-3&quot;&#10;            stat &gt;= 2 -&gt; &quot;-4&quot;&#10;            else -&gt; &quot;-5&quot; // Für Werte unter 1&#10;        }&#10;    }&#10;    fun setEmptyCharacter() {&#10;        _character.value = Character()&#10;        Log.d(&quot;CharacterViewModel&quot;, &quot;Set empty character&quot;)&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.dndmanagerslim.viewmodel&#10;&#10;import android.util.Log&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import com.example.dndmanagerslim.components.character.CharacterTabs&#10;import com.example.dndmanagerslim.components.character.NonPlayerCharacterTabs&#10;import com.example.dndmanagerslim.data.Character&#10;import com.example.dndmanagerslim.data.NpcData&#10;import com.example.dndmanagerslim.repository.DndRepository&#10;import com.example.dndmanagerslim.ui.CharacterUiState&#10;import kotlinx.coroutines.flow.MutableStateFlow&#10;import kotlinx.coroutines.flow.StateFlow&#10;import kotlinx.coroutines.flow.asStateFlow&#10;import kotlinx.coroutines.launch&#10;&#10;&#10;class CharacterViewModel(private val repository: DndRepository) : ViewModel() {&#10;&#10;    private val _uiState = MutableStateFlow(CharacterUiState())&#10;    val uiState: StateFlow&lt;CharacterUiState&gt; = _uiState.asStateFlow()&#10;    // Tab states for characters&#10;    // This is used to manage which tab is currently selected in the UI&#10;    // It allows the UI to react to changes in the selected tab and update accordingly&#10;    // The tabs are defined in the CharacterTabs enum, which includes PlayerCharacters and NonPlayer&#10;    private val _selectedCharacterTab = MutableStateFlow(0)&#10;    val selectedCharacterTab: StateFlow&lt;Int&gt; = _selectedCharacterTab.asStateFlow()&#10;    private val _selectedPlayerCharacterTab = MutableStateFlow(0)&#10;    val selectedPlayerCharacterTab: StateFlow&lt;Int&gt; = _selectedPlayerCharacterTab.asStateFlow()&#10;    private val _selectedNonPlayerCharacterTab = MutableStateFlow(0)&#10;    val selectedNonPlayerCharacterTab: StateFlow&lt;Int&gt; = _selectedNonPlayerCharacterTab.asStateFlow()&#10;&#10;&#10;    // Player Character related states&#10;    private val _characters = MutableStateFlow&lt;List&lt;Character&gt;&gt;(emptyList())&#10;    val characters: StateFlow&lt;List&lt;Character&gt;&gt; = _characters.asStateFlow()&#10;    private val _character = MutableStateFlow(Character())&#10;    val character: StateFlow&lt;Character?&gt; = _character.asStateFlow()&#10;&#10;    // Non-Player Character related states&#10;    private val _npcCharacters = MutableStateFlow&lt;List&lt;NpcData&gt;&gt;(emptyList())&#10;    val npcCharacters: StateFlow&lt;List&lt;NpcData&gt;&gt; = _npcCharacters.asStateFlow()&#10;    private val _npcCharacter = MutableStateFlow(NpcData())&#10;    val npcCharacter: StateFlow&lt;Character?&gt; = _character.asStateFlow()&#10;&#10;    // Filtered characters state&#10;    private val _filteredCharacters = MutableStateFlow&lt;List&lt;Character&gt;&gt;(emptyList())&#10;    val filteredCharacters: StateFlow&lt;List&lt;Character&gt;&gt; = _filteredCharacters.asStateFlow()&#10;&#10;    // filtered NPCs state&#10;    private val _filteredNpcCharacters = MutableStateFlow&lt;List&lt;NpcData&gt;&gt;(emptyList())&#10;    val filteredNpcCharacters: StateFlow&lt;List&lt;NpcData&gt;&gt; = _filteredNpcCharacters.asStateFlow()&#10;&#10;    init {&#10;        fetchCharacters()&#10;    }&#10;    fun fetchCharacters() {&#10;        viewModelScope.launch {&#10;            try {&#10;                val result = repository.getCharacters().characters&#10;                _characters.value = result&#10;&#10;            } catch (e: Exception) {&#10;                // Fehlerbehandlung&#10;&#10;                e.printStackTrace()&#10;                Log.e(&quot;CharacterViewModel&quot;, &quot;Error fetching characters: ${e.message}&quot;)&#10;            }&#10;        }&#10;    }&#10;&#10;    fun handleCharacterTabClick(tabIndex: Int) {&#10;        _selectedCharacterTab.value = tabIndex&#10;        &#10;        Log.d(&quot;CharacterViewModel&quot;, &quot;Selected character tab: $tabIndex&quot;)&#10;    }&#10;    fun handlePlayerCharacterTabs(tabIndex: Int) {&#10;        _selectedPlayerCharacterTab.value = tabIndex&#10;        Log.d(&quot;CharacterViewModel&quot;, &quot;Selected player character tab: $tabIndex&quot;)&#10;    }&#10;    fun handleNonPlayerCharacterTabs(tabIndex: Int) {&#10;        _selectedNonPlayerCharacterTab.value = tabIndex&#10;        Log.d(&quot;CharacterViewModel&quot;, &quot;Selected non-player character tab: $tabIndex&quot;)&#10;    }&#10;    // Search-Functions&#10;    fun onSearch(query: String) {&#10;        Log.d(&quot;CharacterViewModel&quot;, &quot;Searching in Player Characters Tab ${_selectedCharacterTab.value}: $query&quot;)&#10;        _filteredCharacters.value = _characters.value.filter { it.name.contains(query, ignoreCase = true) }&#10;&#10;        Log.d(&quot;CharacterViewModel&quot;, &quot;Searching in NPC Tab ${_selectedNonPlayerCharacterTab.value}: $query&quot;)&#10;        _filteredNpcCharacters.value = _npcCharacters.value.filter { it.name.contains(query, ignoreCase = true) }&#10;    }&#10;    fun handleQueryChange(query: String) {&#10;        Log.d(&quot;CharacterViewModel&quot;, &quot;Query changed: $query&quot;)&#10;        // handle the query change logic here&#10;    }&#10;    fun setCharacter(character: Character) {&#10;        _character.value = character&#10;        Log.d(&quot;CharacterViewModel&quot;, &quot;Selected character: ${character.name}&quot;)&#10;    }&#10;&#10;&#10;    // utility functions&#10;    fun getModifier(stat: Int): String {&#10;        return when {&#10;            stat &gt;= 20 -&gt; &quot;+5&quot;&#10;            stat &gt;= 18 -&gt; &quot;+4&quot;&#10;            stat &gt;= 16 -&gt; &quot;+3&quot;&#10;            stat &gt;= 14 -&gt; &quot;+2&quot;&#10;            stat &gt;= 12 -&gt; &quot;+1&quot;&#10;            stat &gt;= 10 -&gt; &quot;0&quot;&#10;            stat &gt;= 8 -&gt; &quot;-1&quot;&#10;            stat &gt;= 6 -&gt; &quot;-2&quot;&#10;            stat &gt;= 4 -&gt; &quot;-3&quot;&#10;            stat &gt;= 2 -&gt; &quot;-4&quot;&#10;            else -&gt; &quot;-5&quot; // Für Werte unter 1&#10;        }&#10;    }&#10;    fun setEmptyCharacter() {&#10;        _character.value = Character()&#10;        Log.d(&quot;CharacterViewModel&quot;, &quot;Set empty character&quot;)&#10;    }&#10;&#10;    fun setLoading(isLoading: Boolean) {&#10;        _uiState.value = _uiState.value.copy(isLoading = isLoading)&#10;    }&#10;&#10;    fun setSearchQuery(query: String) {&#10;        _uiState.value = _uiState.value.copy(searchQuery = query)&#10;    }&#10;&#10;    fun setError(message: String) {&#10;        _uiState.value = _uiState.value.copy(errorMessage = message)&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>